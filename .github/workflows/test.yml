name: Blue/Green Deployment Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Verify docker-compose setup
        run: docker-compose --version

      - name: Start containers
        run: docker-compose up -d
      
      - name: Wait for services to be ready
        run: sleep 10

      - name: Baseline test - Verify Blue is active
        run: |
          for i in {1..10}; do
            response=$(curl -i -s -w "\n%{http_code}" http://localhost:8080/version)
            status=$(echo "$response" | tail -n1)
            pool=$(echo "$response" | grep -i 'X-App-Pool: ' | awk '{print $2}' | tr -d '\r')

            if [ "$status" != "200" ]; then
              echo "Failed: Expected 200, got $status"
              exit 1
            fi

            if [[ "$pool" != "blue" ]]; then
              echo "Failed: Expected Blue pool, got $pool"
              exit 1
            fi

            echo "Request $i: 200 OK, Pool: Blue"
          done

      - name: Trigger chaos on Blue
        run: |
          echo "Inducing failure on Blue..."
          curl -X POST "http://localhost:8081/chaos/start?mode=error"
          echo "Blue is now returning 500 errors"

      - name: Verify automatic failover to Green
        run: |
          echo "Testing failover - expecting Green to handle traffic..."
          green_count=0
          total_requests=20
          
          for i in $(seq 1 $total_requests); do
            response=$(curl -s -w "\n%{http_code}" http://localhost:8080/version)
            status=$(echo "$response" | tail -n1)
            pool=$(echo "$response" | grep -o 'X-App-Pool: [^[:space:]]*' | cut -d' ' -f2 || echo "unknown")
            
            if [ "$status" != "200" ]; then
              echo "CRITICAL FAILURE: Request $i got status $status (expected 200)"
              echo "Failover did not work - client saw error!"
              exit 1
            fi
            
            if [[ "$pool" == "green" ]]; then
              ((green_count++))
            fi
            
            echo "Request $i: Status=$status, Pool=$pool"
          done
          
          green_percentage=$((green_count * 100 / total_requests))
          echo ""
          echo "Results: $green_count/$total_requests requests served by Green ($green_percentage%)"
          
          if [ $green_percentage -lt 95 ]; then
            echo "Failed: Only $green_percentage% from Green (required â‰¥95%)"
            exit 1
          fi
          
          echo "Failover successful: $green_percentage% from Green, 0 client errors"

      - name: Show container logs on failure
        if: failure()
        run: |
          echo "Nginx logs"
          docker-compose logs nginx
          echo "Blue logs"
          docker-compose logs app_blue
          echo "Green logs"
          docker-compose logs app_green

      - name: Cleanup
        if: always()
        run: docker-compose down
